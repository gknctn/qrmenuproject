// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using qrmenuproject.Models;

#nullable disable

namespace qrmenuproject.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240625001017_UpdateDbForAboutTable")]
    partial class UpdateDbForAboutTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Entities.Models.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AboutDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutFacebookAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutInstagramAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutMission")
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutVision")
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutWpAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Soğuk içecekler"
                        });
                });

            modelBuilder.Entity("Entities.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactSurname")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ProductDescription = "Soguk latte",
                            ProductName = "Ice Latte",
                            ProductPrice = 85m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ProductDescription = "Soguk americano",
                            ProductName = "Ice Americano",
                            ProductPrice = 70m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            ProductDescription = "Soguk Nane ve limon aromali icecek",
                            ProductName = "Cool Lime",
                            ProductPrice = 100m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            ProductDescription = "Soguk mocha",
                            ProductName = "Ice Mocha",
                            ProductPrice = 85m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            ProductDescription = "Soguk bogurtlenli ve limonlu icecek",
                            ProductName = "Berry Lime",
                            ProductPrice = 100m
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
