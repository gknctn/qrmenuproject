// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using qrmenuproject.Models;

#nullable disable

namespace qrmenuproject.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Entities.Models.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AboutDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutFacebookAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutInstagramAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutMission")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutVision")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AboutWpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            AboutDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed et neque porta, auctor elit sit amet, luctus augue. Suspendisse aliquet at justo quis aliquet. Morbi interdum augue sed mauris pulvinar, at efficitur libero efficitur. Sed eget ullamcorper ex. Nam erat tortor, auctor ut ipsum at, feugiat bibendum neque. Ut pellentesque ultrices dolor, ac consequat mauris. Aliquam eget mollis mauris. Phasellus sed velit finibus, tristique libero vitae, volutpat odio. Ut volutpat, metus vitae tempus blandit, ante lacus bibendum ligula, et vulputate eros augue nec augue. Pellentesque velit tellus, scelerisque ut sem sit amet, faucibus condimentum nunc. In eu accumsan mi, at efficitur felis. Sed ligula mi, sagittis ut augue eget, dignissim dictum augue.",
                            AboutFacebookAddress = "F",
                            AboutInstagramAddress = "I",
                            AboutMission = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed et neque porta, auctor elit sit amet, luctus augue. Suspendisse aliquet at justo quis aliquet. Morbi interdum augue sed mauris pulvinar, at efficitur libero efficitur. Sed eget ullamcorper ex. Nam erat tortor, auctor ut ipsum at, feugiat bibendum neque. Ut pellentesque ultrices dolor, ac consequat mauris. Aliquam eget mollis mauris. Phasellus sed velit finibus, tristique libero vitae, volutpat odio. Ut volutpat, metus vitae tempus blandit, ante lacus bibendum ligula, et vulputate eros augue nec augue. Pellentesque velit tellus, scelerisque ut sem sit amet, faucibus condimentum nunc. In eu accumsan mi, at efficitur felis. Sed ligula mi, sagittis ut augue eget, dignissim dictum augue.",
                            AboutVision = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed et neque porta, auctor elit sit amet, luctus augue. Suspendisse aliquet at justo quis aliquet. Morbi interdum augue sed mauris pulvinar, at efficitur libero efficitur. Sed eget ullamcorper ex. Nam erat tortor, auctor ut ipsum at, feugiat bibendum neque. Ut pellentesque ultrices dolor, ac consequat mauris. Aliquam eget mollis mauris. Phasellus sed velit finibus, tristique libero vitae, volutpat odio. Ut volutpat, metus vitae tempus blandit, ante lacus bibendum ligula, et vulputate eros augue nec augue. Pellentesque velit tellus, scelerisque ut sem sit amet, faucibus condimentum nunc. In eu accumsan mi, at efficitur felis. Sed ligula mi, sagittis ut augue eget, dignissim dictum augue.",
                            AboutWpAddress = "W"
                        });
                });

            modelBuilder.Entity("Entities.Models.CafeContactInfo", b =>
                {
                    b.Property<int>("CafeContactInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CafeContactInfoAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CafeContactInfoMail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CafeContactInfoId");

                    b.ToTable("CafeContactInfos");

                    b.HasData(
                        new
                        {
                            CafeContactInfoId = 1,
                            CafeContactInfoAddress = "menuCafe@gmail.com",
                            CafeContactInfoMail = "adresimiz"
                        });
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Soğuk Kahveler"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Sıcak Kahveler"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Soğuk Içecekler"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Sıcak Içecekler"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Kutu Icecekler"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Pastalar"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Tatlılar"
                        });
                });

            modelBuilder.Entity("Entities.Models.Contact", b =>
                {
                    b.Property<int?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ContactDateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactMail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactSurname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProductDateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProductShowcase")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Soguk latte kahvesi.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Ice Latte",
                            ProductPrice = 85m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Soguk americano kahvesi.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Ice Americano",
                            ProductPrice = 70m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Soguk Nane ve lime aromali icecek.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Cool Lime",
                            ProductPrice = 100m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Soguk mocha kahvesi.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Ice Mocha",
                            ProductPrice = 85m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Soguk bogurtlenli ve limonlu icecek.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Berry Lime",
                            ProductPrice = 100m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 6,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Çikolatalı yumusak kek.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Brownie",
                            ProductPrice = 70m,
                            ProductShowcase = true
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 6,
                            ProductDateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductDescription = "Bal kabağı aromalı latte kahvesi.",
                            ProductImage = "/MenuProductImageFiles/IceCoffe1.jpg",
                            ProductName = "Pumpkin Spice Latte",
                            ProductPrice = 70m,
                            ProductShowcase = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
